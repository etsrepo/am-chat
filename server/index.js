// Generated by CoffeeScript 1.6.2
(function() {
  var app, authKey, grantServerAccess, http, nconf, pubnub, _ref;

  nconf = require('nconf');

  nconf.argv().env();

  authKey = nconf.get("SECRET_KEY");

  pubnub = require('./pubnub').init({
    subscribe_key: 'sub-c-4c15a542-ced1-11e2-b70f-02ee2ddab7fe',
    publish_key: 'pub-c-4268517d-1e7a-4bdd-8037-090a3c76a1f0',
    secret_key: nconf.get("SECRET_KEY"),
    auth_key: authKey,
    origin: 'pam-beta.pubnub.com'
  });

  grantServerAccess = function() {
    console.log("Granting read-only access to chat channel");
    pubnub.grant({
      channel: 'chat',
      read: true,
      write: false,
      callback: function(message) {
        return console.log("Successfully made grant request", message);
      },
      error: function(message) {
        return console.log("[ERROR] On grant request", message);
      }
    });
    console.log("Granting access for authentication channel");
    pubnub.grant({
      channel: 'authentication',
      read: false,
      write: true,
      callback: function(message) {}
    });
    console.log("Granting access for self on auth");
    pubnub.grant({
      channel: 'authentication',
      auth_key: authKey,
      read: true,
      write: true,
      callback: function(message) {}
    });
    return setTimeout(grantServerAccess, 1000 * 60 * 60 * 18);
  };

  grantServerAccess();

  console.log("Listening for logins and logouts");

  pubnub.subscribe({
    channel: 'authentication',
    callback: function(message) {
      message = JSON.parse(message);
      console.log("Got message on auth channel", message);
      if (message.action === 'login') {
        console.log("Logging in " + message.authKey);
        return pubnub.grant({
          channel: 'chat',
          read: true,
          write: true,
          auth_key: message.authKey,
          ttl: 1,
          callback: function() {
            return pubnub.publish({
              channel: message.authKey,
              message: JSON.stringify({
                action: 'login',
                success: true
              })
            });
          },
          error: function() {
            return pubnub.publish({
              channel: message.authKey,
              message: JSON.stringify({
                action: 'login',
                success: false
              })
            });
          }
        });
      } else if (message.action === 'logout') {
        console.log("Logging out " + message.authKey);
        return pubnub.grant({
          channel: 'chat',
          read: true,
          write: false,
          auth_key: message.authKey,
          callback: function() {
            return pubnub.publish({
              channel: message.authKey,
              message: JSON.stringify({
                action: 'logout',
                success: true
              })
            });
          },
          error: function() {
            return pubnub.publish({
              channel: message.authKey,
              message: JSON.stringify({
                action: 'logout',
                success: false
              })
            });
          }
        });
      } else if (message.action === 'presence') {
        console.log("Allowing presence for " + message.uuid);
        pubnub.grant({
          channel: message.uuid,
          read: true,
          write: false,
          auth_key: message.uuid,
          ttl: 60 * 24 * 3,
          callback: function() {}
        });
        return pubnub.grant({
          channel: message.uuid,
          read: false,
          write: true,
          auth_key: authKey,
          ttl: 60 * 24 * 3,
          callback: function() {}
        });
      }
    }
  });

  http = require('http');

  app = http.createServer(function(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/html'
    });
    return res.end('Okay');
  });

  app.listen((_ref = process.env.PORT) != null ? _ref : 5000);

}).call(this);
